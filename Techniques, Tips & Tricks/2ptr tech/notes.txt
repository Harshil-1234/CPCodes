                 -------------- TWO POINTER TECHNIQUE ------------------

BASIC CONDITION: A SORTED ARRAY

Two pointers is really an easy and effective technique that is typically used for 
searching pairs in a sorted array.
Given a sorted array A (sorted in ascending order), having N integers, 
find if there exists any pair of elements (A[i], A[j]) 
such that their sum is equal to X.

ALGO for it.
The algorithm basically uses the fact that the input array is sorted. 
We start the sum of extreme values (smallest and largest) and conditionally move 
both pointers. We move left pointer ‘i’ when the sum of A[i] and A[j] is less than X. 
We do not miss any pair because the sum is already smaller than X. 
Same logic applies for right pointer j.

Methods:

Here we will be proposing a two-pointer algorithm by starting off with the
naïve approach only in order to showcase the execution of operations going on 
in both methods and secondary to justify how two-pointer algorithm optimizes 
code via time complexities across all dynamic programming languages such as C+, 
Java, Python, and even JavaScript

1. Naïve Approach using loops
    Run a loop on every element of array from start and end simultaneously.
    Add them and compare.

    Time Complexity:  O(n^2).
    Auxiliary Space: O(1)

2. Optimal approach using two pointer algorithm
    Run a loop on indexes-> while(i<j)....them sum elements at these idexes
    and compare.    

    Time Complexity:  O(n log n) (As sort function is used)
    Auxiliary Space: O(1)


